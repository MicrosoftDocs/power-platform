{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Power Platform REST API - governance",
    "description": "Unified API for all administrative capabilities in Microsoft Power Platform.",
    "version": "2022-03-01-preview"
  },
  "host": "api.powerplatform.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/governance/ruleBasedPolicies": {
      "post": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "Create a rule based policy.",
        "description": "Create a new rule based policy. The input includes rule sets, inputs, and other metadata related to the policy.",
        "operationId": "CreateRuleBasedPolicy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignment"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      },
      "get": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "List rule based policies.",
        "description": "List rule based policies available in the tenant.",
        "operationId": "ListRuleBasedPolicies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of policies.",
            "schema": {
              "$ref": "#/definitions/ListPolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/{policyId}": {
      "get": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "Get rule based policy by ID.",
        "description": "Retrieves details about a specific policy based on the policy ID. The response includes rule sets, inputs, and other metadata related to the policy.",
        "operationId": "GetRuleBasedPolicyByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the policy.",
            "schema": {
              "$ref": "#/definitions/Policy"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      },
      "put": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "Update rule based policy by ID.",
        "description": "Updates details about a specific policy based on the policy ID. The input includes rule sets, inputs, and other metadata related to the policy.",
        "operationId": "UpdateRuleBasedPolicyByID",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignment"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/{policyId}/assignments": {
      "get": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "List rule based policy assignments for a specific policy.",
        "description": "Retrieves a list of rule assignments for a specific policy. This operation provides details about the policy assignments, including rule sets and associated resource types.",
        "operationId": "ListRuleAssignmentsByPolicyId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeRuleSetCounts",
            "description": "Flag to include rule set counts in the response.",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of policy assignments for the specified policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignmentsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified policy does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/{policyId}/environmentGroups/{groupId}/assignments": {
      "post": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "Create environment group rule based assignment.",
        "description": "Create new rule based policy assignment for an environment group. The input includes rule sets, inputs, and other metadata related to the policy.",
        "operationId": "CreateEnviornmentGroupRuleBasedAssignment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "The unique identifier of the environment group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignment"
            }
          },
          "201": {
            "description": "Record created",
            "schema": {
              "$ref": "#/definitions/RuleAssignment"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/{policyId}/environments/{environmentId}/assignments": {
      "post": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "Create environment rule based assignment.",
        "description": "Create new rule based policy assignment for an environment. The input includes rule sets, inputs, and other metadata related to the policy.",
        "operationId": "CreateEnvironmentRuleBasedAssignment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "policyId",
            "description": "The unique identifier of the policy.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "The unique identifier of the environment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignment"
            }
          },
          "201": {
            "description": "Record created",
            "schema": {
              "$ref": "#/definitions/RuleAssignment"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/assignments": {
      "get": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "List rule based policy assignments.",
        "description": "Retrieves a list of rule assignments for a tenant. This operation provides details about the policy assignments, including rule sets and associated resource types.",
        "operationId": "ListRuleAssignments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "includeRuleSetCounts",
            "description": "Flag to include rule set counts in the response.",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of policy assignments.",
            "schema": {
              "$ref": "#/definitions/RuleAssignmentsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified resource does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/environmentGroups/{environmentGroupId}/assignments": {
      "get": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "List rule based policy assignments for a specific environment group.",
        "description": "Retrieves a list of rule assignments for a specific environment group. This operation provides details about the policy assignments, including rule sets and associated resource types.",
        "operationId": "ListRuleAssignmentsByEnvironmentGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environmentGroupId",
            "description": "The unique identifier of the environment group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeRuleSetCounts",
            "description": "Flag to include rule set counts in the response.",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of policy assignments for the specified policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignmentsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified policy does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/ruleBasedPolicies/environments/{environmentId}/assignments": {
      "get": {
        "tags": [
          "RuleBasedPolicies"
        ],
        "summary": "List rule based policy assignments for a specific environment.",
        "description": "Retrieves a list of rule assignments for a specific environment. This operation provides details about the policy assignments, including rule sets and associated resource types.",
        "operationId": "ListRuleAssignmentsByEnvironmentId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environmentId",
            "description": "The unique identifier of the environment group.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeRuleSetCounts",
            "description": "Flag to include rule set counts in the response.",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of policy assignments for the specified policy.",
            "schema": {
              "$ref": "#/definitions/RuleAssignmentsResponse"
            }
          },
          "400": {
            "description": "Bad Request - The query parameters are invalid."
          },
          "401": {
            "description": "Unauthorized - Invalid credentials or missing authentication."
          },
          "404": {
            "description": "Not Found - The specified policy does not exist."
          },
          "500": {
            "description": "Internal Server Error - Unexpected server error."
          }
        }
      }
    },
    "/governance/crossTenantConnectionReports": {
      "get": {
        "tags": [
          "CrossTenantConnectionReports"
        ],
        "summary": "List cross-tenant connection reports for a tenant.",
        "operationId": "ListCrossTenantConnectionReports",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CrossTenantConnectionReportsResponseWithOdataContinuation"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "CrossTenantConnectionReports"
        ],
        "summary": "Generate or fetch a cross-tenant connection report.",
        "operationId": "CreateCrossTenantConnectionReport",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CrossTenantConnectionReport"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CrossTenantConnectionReport"
            }
          }
        }
      }
    },
    "/governance/crossTenantConnectionReports/{reportId}": {
      "get": {
        "tags": [
          "CrossTenantConnectionReports"
        ],
        "summary": "Get a cross-tenant connection report by report ID for a tenant.",
        "operationId": "GetCrossTenantConnectionReport",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "description": "The report ID.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "api-version",
            "description": "The API version.",
            "required": true,
            "type": "string",
            "default": "2022-03-01-preview"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CrossTenantConnectionReport"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "RuleAssignmentsResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleAssignment"
          }
        }
      }
    },
    "ListPolicyResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Policy"
          }
        }
      }
    },
    "RuleAssignment": {
      "type": "object",
      "properties": {
        "ruleSetCount": {
          "description": "The count of rule sets assigned.",
          "type": "integer"
        },
        "policyId": {
          "description": "The unique identifier of the policy.",
          "type": "string"
        },
        "tenantId": {
          "description": "The unique identifier of the tenant.",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique identifier of the resource.",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of resource assigned to the rule.",
          "enum": [
            "NotSpecified",
            "EnvironmentGroup",
            "Environment"
          ],
          "type": "string",
          "example": "EnvironmentGroup"
        }
      }
    },
    "PolicyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the policy.",
          "type": "string",
          "example": "Default Policy Name"
        },
        "ruleSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleSet"
          }
        }
      }
    },
    "Policy": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique identifier of the policy assignment.",
          "type": "string",
          "example": "0946e801-254d-4698-b1e6-db43a52c017c"
        },
        "tenantId": {
          "description": "The unique identifier of the tenant.",
          "type": "string",
          "example": "d8d86e5f-13e9-4bb5-bb94-0f99b507cd15"
        },
        "name": {
          "description": "The name of the policy.",
          "type": "string",
          "example": "Default Policy Name"
        },
        "lastModified": {
          "format": "date-time",
          "description": "The date and time when the policy was last modified.",
          "type": "string",
          "example": "2025-04-11T13:41:32.0000000+00:00"
        },
        "ruleSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleSet"
          }
        },
        "ruleSetCount": {
          "description": "The number of rule sets associated with this policy.",
          "type": "integer",
          "example": 2
        }
      }
    },
    "RuleSet": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique identifier of the rule set.",
          "type": "string",
          "example": "ConnectorManagement"
        },
        "version": {
          "description": "The version of the rule set.",
          "type": "string",
          "example": "1.0"
        },
        "inputs": {
          "description": "The inputs for the rule set, which may vary based on the rule.",
          "type": "object",
          "example": {
            "AllowedConnectorList": [ ],
            "tsg": ""
          }
        }
      }
    },
    "CrossTenantConnection": {
      "required": [
        "tenantId",
        "connectionType"
      ],
      "type": "object",
      "properties": {
        "tenantId": {
          "format": "uuid",
          "description": "The Azure AD tenant ID to or from which the cross-tenant connection occurred.",
          "type": "string"
        },
        "connectionType": {
          "description": "The direction of the cross-tenant connection.",
          "enum": [
            "Inbound",
            "Outbound"
          ],
          "type": "string"
        }
      }
    },
    "CrossTenantConnectionReport": {
      "required": [
        "tenantId",
        "reportId",
        "requestDate",
        "status",
        "startDate",
        "endDate"
      ],
      "type": "object",
      "properties": {
        "tenantId": {
          "format": "uuid",
          "description": "The Azure AD tenant ID for which the report was generated.",
          "type": "string"
        },
        "reportId": {
          "format": "uuid",
          "description": "The report ID.",
          "type": "string"
        },
        "requestDate": {
          "format": "date-time",
          "description": "The date when the cross-tenant connection report was requested.",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "description": "The start of the report date window.",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "description": "The end of the report date window.",
          "type": "string"
        },
        "status": {
          "enum": [
            "Received",
            "InProgress",
            "Completed",
            "Failed"
          ],
          "type": "string"
        },
        "connections": {
          "description": "The page of cross-tenant connections occurring within the report date window.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CrossTenantConnection"
          }
        },
        "@odata.nextLink": {
          "description": "The URI of the next page of the report containing additional cross-tenant connections.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CrossTenantConnectionReportsResponseWithOdataContinuation": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The cross-tenant connection reports for the tenant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CrossTenantConnectionReport"
          }
        },
        "@odata.nextLink": {
          "description": "The URI of the next page of the list response.",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize?resource=https://api.powerplatform.com",
      "scopes": {
        ".default": ".default"
      },
      "description": "Microsoft Entra ID OAuth2"
    }
  },
  "security": [
    {
      "oauth2": [
        ".default"
      ]
    }
  ]
}
